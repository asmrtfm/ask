#!/usr/bin/env bash

[[ "${1,,}" != +(\-)@(h)?(elp) ]] || { cat <<'EOL'

USAGE:
         ask [<OPTION>] [<QUESTION>]

SYNOPSIS:
      Prompt the user with an ostensibly yes-or-no QUESTION (all input is optional).
      Returns 0(true) for (y|yes), or 1(false) for (n|no).
      If no QUESTION is provided it will simply prompt for a '(Y/n)' response.
      Response is case-insensitive.

OPTIONS:
   * OPTIONS must precede QUESTION if supplied.
   
   -h,--help   show this helpful usage information

   -y,--yes    fail if answer is not (y|yes)

   -n,--no     fail if answer is not (n|no)

   -l,--loop   repeatedly ask [<QUESTION>] until a desired answer is given.
               the desired answer can be set using the (-y|--yes) and (-n|--no) flags,
                or defaults to (y|yes)

   -s,         ask [<QUESTION>] again if a response
    --strict    other than (y|yes) or (n|no) is given

EOL
	exit 0
}

shopt -s extglob

Ask='Ask'
Desire='@(y)?(es)'
Loop=false
for((p=0,a=1;a<=$#;a++)){
	case "${!a,,}" in
	'-y'|'--yes') ((p=a)) ;;
	'-n'|'--no') ((p=a)); Desire='@(n)?(o)' ;;
	'-s'|'--strict') ((p=a)); Ask='Strict' ;;
	'-l'|'--loop') ((p=a)); Loop=true ;;
	*) continue
	esac
}

Ask() { local Ans ; printf "${*:2}\n" ; read -p '(Y/n): ' Ans ; [[ "${Ans,,}" == ${1} ]] ; }

Strict() {
	printf "${*:2}\n"
	read -p '(Y/n): ' Ans
	[[ "${Ans,,}" == @(n?(o)|y?(es)) ]] || Strict ${1} "${*:2}"
	[[ "${Ans,,}" == $1 ]]
}

Pester() { $Ask "$1" "${@:2}" || Pester "$1" "${*:2}"; }

if $Loop ; then
	Pester "$Desire" "${*:$((++p))}"
else
	$Ask "$Desire" "${*:$((++p))}"
fi
